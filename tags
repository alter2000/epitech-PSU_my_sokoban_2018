!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
$(NAME)	Makefile	/^$(NAME): $(SRC) $(wildcard include\/*.h)$/;"	t
B_BLUE	include/colors.h	/^# define B_BLUE /;"	d
B_BLUE	lib/my/colors.h	/^# define B_BLUE /;"	d
B_GREEN	include/colors.h	/^# define B_GREEN /;"	d
B_GREEN	lib/my/colors.h	/^# define B_GREEN /;"	d
B_RED	include/colors.h	/^# define B_RED /;"	d
B_RED	lib/my/colors.h	/^# define B_RED /;"	d
B_YELLOW	include/colors.h	/^# define B_YELLOW /;"	d
B_YELLOW	lib/my/colors.h	/^# define B_YELLOW /;"	d
CFLAGS	lib/my/Makefile	/^CFLAGS=-Wall -Werror -I.\/$/;"	m
NAME	Makefile	/^NAME=my_sokoban$/;"	m
OBJ	Makefile	/^OBJ=$(SRC:.c=.o)$/;"	m
OBJ	lib/my/Makefile	/^OBJ=$(SRC:.c=.o)$/;"	m
RESET	include/colors.h	/^# define RESET /;"	d
RESET	lib/my/colors.h	/^# define RESET /;"	d
SOKOBAN_H	include/sokoban.h	/^#define SOKOBAN_H$/;"	d
SRC	Makefile	/^SRC=$(wildcard *.c)$/;"	m
SRC	lib/my/Makefile	/^SRC=$(shell find . -type f -name '*.c')$/;"	m
Test	tests/mylib/char_check_tests.c	/^Test(my_isalpha, all)$/;"	f
Test	tests/mylib/char_check_tests.c	/^Test(my_isdigit, all)$/;"	f
Test	tests/mylib/char_check_tests.c	/^Test(my_islower, all)$/;"	f
Test	tests/mylib/char_check_tests.c	/^Test(my_isprintable, all)$/;"	f
Test	tests/mylib/char_check_tests.c	/^Test(my_isspace, all)$/;"	f
Test	tests/mylib/char_check_tests.c	/^Test(my_isupper, all)$/;"	f
Test	tests/mylib/my_strdup_test.c	/^Test(my_strdup, empty)$/;"	f
Test	tests/mylib/my_strdup_test.c	/^Test(my_strdup, not_empty)$/;"	f
Test	tests/mylib/string_tests.c	/^Test(strlen, idk)$/;"	f
_COLORS_H_	include/colors.h	/^# define _COLORS_H_$/;"	d
_COLORS_H_	lib/my/colors.h	/^# define _COLORS_H_$/;"	d
_MY_H_	include/my.h	/^#define _MY_H_$/;"	d
_MY_H_	lib/my/my.h	/^#define _MY_H_$/;"	d
__anond14593bb0108	include/sokoban.h	/^typedef struct {$/;"	s
__anond14593bb0208	include/sokoban.h	/^typedef struct {$/;"	s
__anond14593bb0308	include/sokoban.h	/^typedef struct {$/;"	s
add_elem	handle_map.c	/^coord_t add_elem(uint_t x, uint_t y)$/;"	f	typeref:typename:coord_t
all	Makefile	/^all: $(NAME)$/;"	t
all	lib/my/Makefile	/^all: link$/;"	t
arr	tests/mylib/string_tests.c	/^    char const **arr = malloc(sizeof(char *) * 4);$/;"	v	typeref:typename:char const **
boxnum	include/sokoban.h	/^    uint_t boxnum;$/;"	m	struct:__anond14593bb0308	typeref:typename:uint_t
btree	include/my.h	/^struct btree$/;"	s
btree	lib/my/my.h	/^struct btree$/;"	s
btree_apply_infix	lib/my/btree_traverse.c	/^void btree_apply_infix(btree_t *root, long long int (*applyf)(char *))$/;"	f	typeref:typename:void
btree_apply_postfix	lib/my/btree_traverse.c	/^void btree_apply_postfix(btree_t *root, long long int (*applyf)(char *))$/;"	f	typeref:typename:void
btree_apply_prefix	lib/my/btree_traverse.c	/^void btree_apply_prefix(btree_t *root, long long int (*applyf)(char *))$/;"	f	typeref:typename:void
btree_create_node	lib/my/btree_edit.c	/^btree_t *btree_create_node(char *data)$/;"	f	typeref:typename:btree_t *
btree_destroy	lib/my/btree_edit.c	/^void btree_destroy(btree_t *root)$/;"	f	typeref:typename:void
btree_insert_data	lib/my/btree_edit.c	/^void btree_insert_data(btree_t *root, char *data, int (*cmpf)())$/;"	f	typeref:typename:void
btree_level_count	lib/my/btree_edit.c	/^size_t btree_level_count(btree_t const *root)$/;"	f	typeref:typename:size_t
btree_t	include/my.h	/^typedef struct btree btree_t;$/;"	t	typeref:struct:btree
btree_t	lib/my/my.h	/^typedef struct btree btree_t;$/;"	t	typeref:struct:btree
check	movement.c	/^char check(char *c, char *n)$/;"	f	typeref:typename:char
check_map	check.c	/^static char **check_map(char **s)$/;"	f	typeref:typename:char **	file:
check_solved	check.c	/^bool check_solved(map_t *m)$/;"	f	typeref:typename:bool
clean	Makefile	/^clean:$/;"	t
clean	lib/my/Makefile	/^clean:$/;"	t
clear_nl	map.c	/^static char **clear_nl(char **m)$/;"	f	typeref:typename:char **	file:
coord_t	include/sokoban.h	/^} coord_t;$/;"	t	typeref:struct:__anond14593bb0108
count_letters	lib/my/my_str_to_word_array.c	/^static int count_letters(char const *str)$/;"	f	typeref:typename:int	file:
count_words	lib/my/my_str_to_word_array.c	/^static int count_words(char const *str)$/;"	f	typeref:typename:int	file:
cur	include/sokoban.h	/^    coord_t cur;$/;"	m	struct:__anond14593bb0208	typeref:typename:coord_t
data	include/my.h	/^    char *data;$/;"	m	struct:btree	typeref:typename:char *
data	lib/my/my.h	/^    char *data;$/;"	m	struct:btree	typeref:typename:char *
debug	Makefile	/^debug:$/;"	t
debug	lib/my/Makefile	/^debug: $(SRC) $(OBJ)$/;"	t
destroy_double_array	lib/my/my_str_to_word_array.c	/^void destroy_double_array(char **m)$/;"	f	typeref:typename:void
destroy_map	handle_map.c	/^void destroy_map(map_t *m)$/;"	f	typeref:typename:void
err	include/my.h	/^static inline size_t err(char const *errstr)$/;"	f	typeref:typename:size_t
err	lib/my/my.h	/^static inline size_t err(char const *errstr)$/;"	f	typeref:typename:size_t
errb	include/my.h	/^static inline size_t errb(char const *errstr)$/;"	f	typeref:typename:size_t
errb	lib/my/my.h	/^static inline size_t errb(char const *errstr)$/;"	f	typeref:typename:size_t
errc	include/my.h	/^static inline size_t errc(char *buf, char const *errstr)$/;"	f	typeref:typename:size_t
errc	lib/my/my.h	/^static inline size_t errc(char *buf, char const *errstr)$/;"	f	typeref:typename:size_t
errm	include/my.h	/^static inline size_t errm(char **buf, char const *errstr)$/;"	f	typeref:typename:size_t
errm	lib/my/my.h	/^static inline size_t errm(char **buf, char const *errstr)$/;"	f	typeref:typename:size_t
event	window.c	/^void event(win_t *w, map_t *m, char **av)$/;"	f	typeref:typename:void
fclean	Makefile	/^fclean: clean$/;"	t
fclean	lib/my/Makefile	/^fclean: clean$/;"	t
fill_map	map.c	/^map_t *fill_map(char **map)$/;"	f	typeref:typename:map_t *
find_longest_line	map.c	/^static uint_t find_longest_line(char **m)$/;"	f	typeref:typename:uint_t	file:
get_buf	check.c	/^char **get_buf(char const *path)$/;"	f	typeref:typename:char **
get_coords	handle_map.c	/^coord_t *get_coords(char **m, uint_t num, char elem)$/;"	f	typeref:typename:coord_t *
getd	lib/my/my_getline.c	/^char *getd(int fd, char **lp, int *n, char delim)$/;"	f	typeref:typename:char *
getl	lib/my/my_getline.c	/^char *getl(int fd, char **lp, int *blen)$/;"	f	typeref:typename:char *
getnbr_rec	lib/my/my_atoi.c	/^long long int getnbr_rec(char const *ch, long long int i)$/;"	f	typeref:typename:long long int
gib	lib/my/my_memset.c	/^void *gib(size_t n)$/;"	f	typeref:typename:void *
gib_help	main.c	/^static int gib_help(void)$/;"	f	typeref:typename:int	file:
go_down	movement.c	/^void go_down(win_t *w, map_t *m)$/;"	f	typeref:typename:void
go_left	movement.c	/^void go_left(win_t *w, map_t *m)$/;"	f	typeref:typename:void
go_right	movement.c	/^void go_right(win_t *w, map_t *m)$/;"	f	typeref:typename:void
go_up	movement.c	/^void go_up(win_t *w, map_t *m)$/;"	f	typeref:typename:void
init	window.c	/^win_t *init(void)$/;"	f	typeref:typename:win_t *
is_in	lib/my/is_in.c	/^int is_in(char const elem, char const *set)$/;"	f	typeref:typename:int
l_t	include/my.h	/^typedef long int l_t;$/;"	t	typeref:typename:long int
l_t	lib/my/my.h	/^typedef long int l_t;$/;"	t	typeref:typename:long int
left	include/my.h	/^    struct btree *left;$/;"	m	struct:btree	typeref:struct:btree *
left	lib/my/my.h	/^    struct btree *left;$/;"	m	struct:btree	typeref:struct:btree *
link	lib/my/Makefile	/^link: $(OBJ)$/;"	t
ll_t	include/my.h	/^typedef long long int ll_t;$/;"	t	typeref:typename:long long int
ll_t	lib/my/my.h	/^typedef long long int ll_t;$/;"	t	typeref:typename:long long int
m	include/sokoban.h	/^    char **m;$/;"	m	struct:__anond14593bb0308	typeref:typename:char **
main	main.c	/^int main(int ac, char **av)$/;"	f	typeref:typename:int
map_t	include/sokoban.h	/^} map_t;$/;"	t	typeref:struct:__anond14593bb0308
max	include/my.h	/^static inline int max(int i, int j)$/;"	f	typeref:typename:int
max	include/sokoban.h	/^    coord_t max;$/;"	m	struct:__anond14593bb0208	typeref:typename:coord_t
max	include/sokoban.h	/^    coord_t max;$/;"	m	struct:__anond14593bb0308	typeref:typename:coord_t
max	lib/my/my.h	/^static inline int max(int i, int j)$/;"	f	typeref:typename:int
min	include/my.h	/^static inline int min(int i, int j)$/;"	f	typeref:typename:int
min	lib/my/my.h	/^static inline int min(int i, int j)$/;"	f	typeref:typename:int
mkmap	handle_map.c	/^map_t *mkmap(char **map)$/;"	f	typeref:typename:map_t *
my_atoi	lib/my/my_atoi.c	/^int my_atoi(char const *s)$/;"	f	typeref:typename:int
my_atoll	lib/my/my_atoi.c	/^long long int my_atoll(char const *s)$/;"	f	typeref:typename:long long int
my_count_digits	lib/my/my_nb_checks.c	/^int my_count_digits(int const n)$/;"	f	typeref:typename:int
my_count_digits_rec	lib/my/my_nb_checks.c	/^int my_count_digits_rec(int const n, int const i)$/;"	f	typeref:typename:int
my_getnbr	lib/my/my_atoi.c	/^long long int my_getnbr(char const *str)$/;"	f	typeref:typename:long long int
my_is_prime	lib/my/my_nb_checks.c	/^int my_is_prime(int const nb)$/;"	f	typeref:typename:int
my_isalpha	lib/my/my_isalpha.c	/^int my_isalpha(char const ch)$/;"	f	typeref:typename:int
my_isdigit	lib/my/my_isalpha.c	/^int my_isdigit(char const ch)$/;"	f	typeref:typename:int
my_islower	lib/my/my_isalpha.c	/^int my_islower(char const ch)$/;"	f	typeref:typename:int
my_isprintable	lib/my/my_isalpha.c	/^int my_isprintable(char const ch)$/;"	f	typeref:typename:int
my_isspace	lib/my/is_in.c	/^int my_isspace(char const ch)$/;"	f	typeref:typename:int
my_isupper	lib/my/my_isalpha.c	/^int my_isupper(char const ch)$/;"	f	typeref:typename:int
my_itoa	lib/my/my_put_nbr.c	/^char *my_itoa(int nb)$/;"	f	typeref:typename:char *
my_memset	lib/my/my_memset.c	/^void *my_memset(char *s, char ch, size_t n)$/;"	f	typeref:typename:void *
my_put_nbr	lib/my/my_put_nbr.c	/^int my_put_nbr(int nb)$/;"	f	typeref:typename:int
my_put_nbr_base	lib/my/my_put_nbr.c	/^int my_put_nbr_base(int nb, char const *base)$/;"	f	typeref:typename:int
my_putchar	lib/my/crucial.c	/^int my_putchar(int const c)$/;"	f	typeref:typename:int
my_putstr	lib/my/crucial.c	/^long long int my_putstr(char const *str)$/;"	f	typeref:typename:long long int
my_realloc	lib/my/my_realloc.c	/^char *my_realloc(char *s, int extra)$/;"	f	typeref:typename:char *
my_revstr	lib/my/my_revstr.c	/^char *my_revstr(char *str)$/;"	f	typeref:typename:char *
my_show_word_array	lib/my/my_str_to_word_array.c	/^int my_show_word_array(char const *tab[])$/;"	f	typeref:typename:int
my_showstr	lib/my/my_str_convert.c	/^void my_showstr(char const *str)$/;"	f	typeref:typename:void
my_sort_int_array	lib/my/my_revstr.c	/^void my_sort_int_array(int *array, int size)$/;"	f	typeref:typename:void
my_str_isalpha	lib/my/my_str_is.c	/^int my_str_isalpha(char const *str)$/;"	f	typeref:typename:int
my_str_islower	lib/my/my_str_is.c	/^int my_str_islower(char const *str)$/;"	f	typeref:typename:int
my_str_isnum	lib/my/my_str_is.c	/^int my_str_isnum(const char *str)$/;"	f	typeref:typename:int
my_str_isprintable	lib/my/my_str_is.c	/^int my_str_isprintable(char const *str)$/;"	f	typeref:typename:int
my_str_isupper	lib/my/my_str_is.c	/^int my_str_isupper(char const *str)$/;"	f	typeref:typename:int
my_str_to_word_array	lib/my/my_str_to_word_array.c	/^char **my_str_to_word_array(char const *str)$/;"	f	typeref:typename:char **
my_strcapitalize	lib/my/my_str_convert.c	/^char *my_strcapitalize(char *str)$/;"	f	typeref:typename:char *
my_strcat	lib/my/my_strdups.c	/^char *my_strcat(char *dest, char const *src)$/;"	f	typeref:typename:char *
my_strcmp	lib/my/my_strdups.c	/^int my_strcmp(char const *s1, char const *s2)$/;"	f	typeref:typename:int
my_strcpy	lib/my/crucial.c	/^char *my_strcpy(char *dest, char const *src)$/;"	f	typeref:typename:char *
my_strdup	lib/my/crucial.c	/^char *my_strdup(char const *src)$/;"	f	typeref:typename:char *
my_strlen	lib/my/crucial.c	/^unsigned long long int my_strlen(char const *str)$/;"	f	typeref:typename:unsigned long long int
my_strlowcase	lib/my/my_str_convert.c	/^char *my_strlowcase(char *str)$/;"	f	typeref:typename:char *
my_strncat	lib/my/my_strdups.c	/^char *my_strncat(char *dest, char const *src, int n)$/;"	f	typeref:typename:char *
my_strncmp	lib/my/my_strdups.c	/^int my_strncmp(char const *s1, char const *s2, int n)$/;"	f	typeref:typename:int
my_strncpy	lib/my/my_strdups.c	/^char *my_strncpy(char *dest, char const *src, int n)$/;"	f	typeref:typename:char *
my_strstr	lib/my/is_in.c	/^char *my_strstr(char *str, const char *to_find)$/;"	f	typeref:typename:char *
my_strtoll	lib/my/my_put_nbr.c	/^long long int my_strtoll(char *s, char **end, long long int rec)$/;"	f	typeref:typename:long long int
my_strupcase	lib/my/my_str_convert.c	/^char *my_strupcase(char *str)$/;"	f	typeref:typename:char *
my_swap	lib/my/my_revstr.c	/^void my_swap(int *a, int *b)$/;"	f	typeref:typename:void
next	include/my.h	/^    struct btree *next;$/;"	m	struct:btree	typeref:struct:btree *
next	lib/my/my.h	/^    struct btree *next;$/;"	m	struct:btree	typeref:struct:btree *
old	include/sokoban.h	/^    coord_t old;$/;"	m	struct:__anond14593bb0308	typeref:typename:coord_t
p	include/sokoban.h	/^    coord_t p;$/;"	m	struct:__anond14593bb0308	typeref:typename:coord_t
padnum	include/sokoban.h	/^    uint_t padnum;$/;"	m	struct:__anond14593bb0308	typeref:typename:uint_t
pads	include/sokoban.h	/^    coord_t *pads;$/;"	m	struct:__anond14593bb0308	typeref:typename:coord_t *
parent	include/my.h	/^    struct btree *parent;$/;"	m	struct:btree	typeref:struct:btree *
parent	lib/my/my.h	/^    struct btree *parent;$/;"	m	struct:btree	typeref:struct:btree *
print_map	handle_map.c	/^void print_map(win_t *w, map_t *m)$/;"	f	typeref:typename:void
re	Makefile	/^re: fclean $(NAME)$/;"	t
re	lib/my/Makefile	/^re: fclean all$/;"	t
redirect_stderr	tests/mylib/err_test.c	/^void redirect_stderr(void)$/;"	f	typeref:typename:void
redirect_stdout	tests/mylib/string_tests.c	/^void redirect_stdout(void)$/;"	f	typeref:typename:void
regib	lib/my/my_realloc.c	/^void *regib(char *s, int extra)$/;"	f	typeref:typename:void *
right	include/my.h	/^    struct btree *right;$/;"	m	struct:btree	typeref:struct:btree *
right	lib/my/my.h	/^    struct btree *right;$/;"	m	struct:btree	typeref:struct:btree *
root	include/my.h	/^    struct btree *root;$/;"	m	struct:btree	typeref:struct:btree *
root	lib/my/my.h	/^    struct btree *root;$/;"	m	struct:btree	typeref:struct:btree *
run_game	window.c	/^void run_game(win_t *w, map_t *m, char **av)$/;"	f	typeref:typename:void
s	tests/mylib/err_test.c	/^    char *s = my_strdup("huh");$/;"	v	typeref:typename:char *
set_colors	window.c	/^void set_colors(void)$/;"	f	typeref:typename:void
sighandle	signal.c	/^void sighandle(int sig)$/;"	f	typeref:typename:void
small_screen	check.c	/^bool small_screen(win_t *w, map_t *m)$/;"	f	typeref:typename:bool
sokoban_err	check.c	/^void sokoban_err(char **d, char *s)$/;"	f	typeref:typename:void
tests_run	Makefile	/^tests_run:$/;"	t
uint_t	include/my.h	/^typedef unsigned int uint_t;$/;"	t	typeref:typename:unsigned int
uint_t	lib/my/my.h	/^typedef unsigned int uint_t;$/;"	t	typeref:typename:unsigned int
ul_t	include/my.h	/^typedef unsigned long int ul_t;$/;"	t	typeref:typename:unsigned long int
ul_t	lib/my/my.h	/^typedef unsigned long int ul_t;$/;"	t	typeref:typename:unsigned long int
ull_t	include/my.h	/^typedef unsigned long long int ull_t;$/;"	t	typeref:typename:unsigned long long int
ull_t	lib/my/my.h	/^typedef unsigned long long int ull_t;$/;"	t	typeref:typename:unsigned long long int
win_t	include/sokoban.h	/^} win_t;$/;"	t	typeref:struct:__anond14593bb0208
x	include/sokoban.h	/^    uint_t x;$/;"	m	struct:__anond14593bb0108	typeref:typename:uint_t
y	include/sokoban.h	/^    uint_t y;$/;"	m	struct:__anond14593bb0108	typeref:typename:uint_t
